-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
-#
-#   API
-#
-#   field: string naming the field on the Backbone model. 
-#        "name.first_name" will nest
-#   ctx: the attributes of the Backbone model
-#   type: (optional) one of ["string", "radio", "select"]. defaults to string
-#   options: (optional) if given, makes a select box with these as choices
-#         should be given as a list of [value, display_text] pairs
-#   id: (optional) the id of the input
-#   label: (optional) the text to display on the label
-#   span_width: (optional) the number of grid columns to span. defaults to 4
-# 
-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


- getVal = (fields) =>
  - val = @ctx
  - for part in fields
    - val = val[part]
  - return val

- default_type = "string"
- type = @type || default_type

- splitted = @field.split(".")
- val = getVal(splitted) if type isnt "date"
- id = @id || splitted.join("_")
- label = @label || splitted.reverse()[0].split("_").join(" ")
- spans = @span_width || 4


.field{ class: "span-#{spans}"}

  - if type is "radio"

    %fieldset.radio
      - if @label?
        %legend= @label

      - for value_and_display in @options
        .radio-option
          / add thing to do if val matches val then selected
          %input{ type: "radio", name: id, id: "#{id}_#{value_and_display[0]}", value: value_and_display[0], data: {'field-name': @field} }
          %label{ for: "#{id}_#{value_and_display[0]}" }= value_and_display[1]
        -if value_and_display.length > 2 and value_and_display[2].length
          .subfield{ 'data-reveal-field': @field, 'data-reveal-value': value_and_display[0] }
            - subfield = if value_and_display.length > 3 then value_and_display[3] else @revealed_field
            - subtype = if value_and_display.length > 4 then value_and_display[4] else default_type
            != JST['helpers/data_input'](field: subfield, label: value_and_display[2], ctx: @ctx, span_width: 12, type: subtype)

  - else if type is "select"

    %label{ for: id }= label

    %select{ id: id, data: { 'field-name': @field } }
      - for value_and_display in @options
        - value = value_and_display[0]
        - display = value_and_display[1]
        - if value == val
          %option{ value: value, selected: true }= display
        - else
          %option{ value: value }= display

  - else if type is "date"

    %label{ for: id }= "#{label} (MM/DD/YYYY)"

    .date-fields
      %select{ class: 'month', data: { 'field-name': "#{@field}(2i)" } }
        - splitted[-1] = "#{splitted[-1]}(2i)"
        - val = getVal(splitted)
        - options = [1..12]
        - options.unshift("")
        - for mm in options
          %option{ value: mm }= mm

      .slash /

      %select{ class: 'day', data: { 'field-name': "#{@field}(3i)" } }
        - splitted[-1] = "#{splitted[-1]}(3i)"
        - val = getVal(splitted)
        - options = [1..31]
        - options.unshift("")
        - for dd in options
          %option{ value: dd }= dd

      .slash /

      %select{ class: 'year', data: { 'field-name': "#{@field}(1i)" } }
        - splitted[-1] = "#{splitted[-1]}(1i)"
        - val = getVal(splitted)
        - options = [1900..2000].reverse()
        - options.unshift("")
        - for yy in options
          %option{ value: yy }= yy

  - else
    -### Regular text input

    %label{ for: id }= label

    - if @disabled
      %input{ value: val, id: id, disabled: true, data: { 'field-name': @field } }
    - else
      %input{ value: val, id: id, data: { 'field-name': @field } }
