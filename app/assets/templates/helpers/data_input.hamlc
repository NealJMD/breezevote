-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
-#
-#   API
-#
-#   field: string naming the field on the Backbone model. 
-#        "name.first_name" will nest
-#   ctx: the attributes of the Backbone model
-#   type: (optional) one of ["string", "radio", "select"]. defaults to string
-#   options: (optional) if given, makes a select box with these as choices
-#         should be given as a list of [value, display_text] pairs
-#   id: (optional) the id of the input
-#   label: (optional) the text to display on the label
-#   span_width: (optional) the number of grid columns to span. defaults to 4
-#   disabled: (optional) whether the field should be disabled
-# 
-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


- getVal = (fields, index=-1) =>
  - val = @ctx
  - for part, ii in fields
    - val = val[part]
    -# this is to correctly render data from rails server, which puts
    -# date as YYYY-MM-DD, and we have as separate fields
    - if index >= 0 and ii is fields.length - 1 and val?
      - val = val.split('-')[index]
  - return val

- same = (a, b) ->
  - if typeof(a) is "number" or typeof(b) is "number"
    - return Number(a) is Number(b)
  - return String(a) is String(b)

- default_type = "string"
- type = @type || default_type

- splitted = @field.split(".")
- val = getVal(splitted) if type isnt "date"
- id = @id || splitted.join("_")
- label = @label || splitted.reverse()[0].split("_").join(" ")
- spans = @span_width || 4
- disabled = @disabled || false

.field{ class: "span-#{spans}"}

  - if type is "radio"

    %fieldset.radio
      - if @label?
        %legend= @label

      - for value_and_display in @options
        - value = value_and_display[0]
        .radio-option
          / add thing to do if val same val then selected
          %input{ type: "radio", name: id, id: "#{id}_#{value}", value: value, data: {'field-name': @field}, checked: same(value, val) }
          %label{ for: "#{id}_#{value}" }= value_and_display[1]
        -if value_and_display.length > 2 and value_and_display[2].length
          .subfield{ 'data-reveal-field': @field, 'data-reveal-value': value }
            - subfield = if value_and_display.length > 3 then value_and_display[3] else @revealed_field
            - subtype = if value_and_display.length > 4 then value_and_display[4] else default_type
            != JST['helpers/data_input'](field: subfield, label: value_and_display[2], ctx: @ctx, span_width: 12, type: subtype)

  - else if type is "select"

    %label{ for: id }= label

    %select{ id: id, data: { 'field-name': @field } }
      - for value_and_display in @options
        - value = value_and_display[0]
        %option{ value: value, selected: same(value, val) }= value_and_display[1]

  - else if type is "date"

    %label{ for: id }= "#{label} (MM/DD/YYYY)"

    .date-fields
      %select{ class: 'month', data: { 'field-name': "#{@field}(2i)" } }
        - val = getVal(splitted, 1)
        - options = [1..12]
        - options.unshift("")
        - for mm in options
          %option{ value: mm, selected: same(mm, val) }= mm

      .slash /

      %select{ class: 'day', data: { 'field-name': "#{@field}(3i)" } }
        - val = getVal(splitted, 2)
        - options = [1..31]
        - options.unshift("")
        - for dd in options
          %option{ value: dd, selected: same(dd, val) }= dd

      .slash /

      %select{ class: 'year', data: { 'field-name': "#{@field}(1i)" } }
        - val = getVal(splitted, 0)
        - options = [1900..2000].reverse()
        - options.unshift("")
        - for yy in options
          %option{ value: yy, selected: same(yy, val) }= yy

  - else
    -### Regular text input

    %label{ for: id }= label

    %input{ value: val, id: id, disabled: disabled, data: { 'field-name': @field } }
    