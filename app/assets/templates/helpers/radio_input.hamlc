-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
-#
-#   API
-#
-#   field: string naming the field on the Backbone model. 
-#        "name.first_name" will nest
-#   ctx: the attributes of the Backbone model
-#   options: should be given as a list of [value, display_text] pairs
-#   revealed_field: (optional) the default field to be revealed
-#   label: (optional) the label above the form
-#   id: (optional) the id of the input
-#   span_width: (optional) the number of grid columns to span. defaults to 12
-# 
-### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


- splitted = @field.split(".")
- val = @ctx
- for part in splitted
  - val = val[part]
- id = @id || splitted.join("_")
-# label = @label || splitted.reverse()[0].split("_").join(" ")
- spans = @span_width || 12


.field{ class: "span-#{spans}"}

  %fieldset.radio
    - if @label?
      %legend= @label

    - for value_and_display in @options
      .radio-option
        / add thing to do if val matches val then selected
        %input{ type: "radio", name: id, id: "#{id}_#{value_and_display[0]}", value: value_and_display[0], data: {'field-name': @field} }
        %label{ for: "#{id}_#{value_and_display[0]}" }= value_and_display[1]
      -if value_and_display.length > 2 and value_and_display[2].length
        .subfield{ 'data-reveal-field': @field, 'data-reveal-value': value_and_display[0] }
          - subfield = if value_and_display.length > 3 then value_and_display[3] else @revealed_field
          != JST['helpers/data_input'](field: subfield, label: value_and_display[2], ctx: @ctx, span_width: 12)


  /   %select{ id: id, data: { 'field-name': @field } }
  /     - for value_and_display in @options
  /       - value = value_and_display[0]
  /       - display = value_and_display[1]
  /       - if value == val
  /         %option{ value: value, selected: true }= display
  /       - else
  /         %option{ value: value }= display
  / - else
  /   -### Regular text input
  /   - if @disabled
  /     %input{ value: val, id: id, disabled: true, data: { 'field-name': @field } }
  /   - else
  /     %input{ value: val, id: id, data: { 'field-name': @field } }
